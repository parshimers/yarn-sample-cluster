<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
<property>
  <name>dfs.replication</name>
  <value><%= scope.lookupvar('hadoop::params::replication') %></value>
  <description>Default block replication.
  The actual number of replications can be specified when the file is created.
  The default is used if replication is not specified in create time.
  </description>
</property>
<property>
  <name>dfs.permissions</name>
  <value>false</value>
</property>

<% if scope.lookupvar('hadoop::params::kerberos_mode') == "yes" %>
<property>
        <name>dfs.datanode.data.dir.perm</name>
        <value>700</value>
</property>

<property>        
        <name>dfs.datanode.address</name>
        <value>0.0.0.0:1004</value>
</property>
<property>
        <name>dfs.datanode.http.address</name>
        <value>0.0.0.0:1006</value>
</property>
<property>
        <name>dfs.datanode.https.address</name>
        <value>0.0.0.0:50470</value>
</property>

<property>
        <name>dfs.namenode.kerberos.principal</name> 
        <value>nn/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value> 
        <description> Kerberos principal name for the
        NameNode </description> 
</property>   
<property>
        <name>dfs.namenode.kerberos.https.principal</name> 
        <value>host/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value> 
        <description> Kerberos principal name for the
        NameNode </description> 
</property>   
<property>
        <name>dfs.secondary.namenode.kerberos.principal</name> 
        <value>sn/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>    
        <description>Kerberos principal name for the secondary NameNode.    
        </description>          
</property>  
<property>
        <name>dfs.namenode.secondary.kerberos.https.principal</name> 
        <value>host/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>    
        <description>Kerberos principal name for the secondary NameNode.    
        </description>          
</property>  
<property>
        <name>dfs.datanode.kerberos.principal</name> 
        <value>dn/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>    
        <description>The Kerberos principal that the DataNode runs as. "_HOST" is replaced by the real host name.
         </description>          
</property> 
<property>
        <name>dfs.datanode.kerberos.https.principal</name> 
        <value>host/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>    
        <description>The Kerberos principal that the DataNode runs as. "_HOST" is replaced by the real host name.
         </description>          
</property> 
<property>
        <name>dfs.web.authentication.kerberos.principal</name> 
        <value>HTTP/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>    
        <description>The HTTP Kerberos principal used by Hadoop-Auth in the HTTP endpoint.
         </description>          
</property>

<% if scope.lookupvar('hadoop::params::qjm_ha_mode') == "yes" %>
<property>
    <name>dfs.journalnode.kerberos.principal</name>
    <value>hdfs/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>
</property>
<property>
    <name>dfs.journalnode.kerberos.internal.spnego.principal</name>
    <value>HTTP/_HOST@<%= scope.lookupvar('hadoop::params::kerberos_realm') %></value>
</property>
<% end %>

<property>
        <name>dfs.namenode.keytab.file</name> 
        <value><%= scope.lookupvar('hadoop::params::keytab_path') %>/nn.service.keytab</value>    
        <description>Combined keytab file containing the namenode service and host principals.   
        </description>          
</property>  
<property>
        <name>dfs.secondary.namenode.keytab.file</name> 
        <value><%= scope.lookupvar('hadoop::params::keytab_path') %>/sn.service.keytab</value>    
        <description>Combined keytab file containing the namenode service and host principals.   
        </description>          
</property>  
<property>
        <name>dfs.datanode.keytab.file</name> 
        <value><%= scope.lookupvar('hadoop::params::keytab_path') %>/dn.service.keytab</value>    
        <description>The filename of the keytab file for the DataNode.   
        </description>          
</property>  
<property>
        <name>dfs.web.authentication.kerberos.keytab</name> 
        <value><%= scope.lookupvar('hadoop::params::keytab_path') %>/http.service.keytab</value>    
        <description>The Kerberos keytab file with the credentials for the HTTP Kerberos principal used by Hadoop-Auth in the HTTP endpoint.    
        </description>          
</property>

<% if scope.lookupvar('hadoop::params::qjm_ha_mode') == "yes" %>
<property>
    <name>dfs.journalnode.keytab.file</name>
    <value><%= scope.lookupvar('hadoop::params::keytab_path') %>/hdfs.service.keytab</value>
</property>
<% end %>

<% end %>

<% if scope.lookupvar('hadoop::params::qjm_ha_mode') == "yes" %>

<property>
    <name>dfs.nameservices</name>
    <value><%= scope.lookupvar('hadoop::params::dfs_nameservices') %></value>
</property>
<property>
    <name>dfs.ha.namenodes.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %></name>
    <value>nn1,nn2</value>
</property>

<property>
    <name>dfs.namenode.rpc-address.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %>.nn1</name>
    <value><%= scope.lookupvar('hadoop::params::master') %>:<%= scope.lookupvar('hadoop::params::hdfsport') %></value>
</property>
<property>
    <name>dfs.namenode.rpc-address.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %>.nn2</name>
    <value><%= scope.lookupvar('hadoop::params::standby_master') %>:<%= scope.lookupvar('hadoop::params::hdfsport') %></value>
</property>

<property>
    <name>dfs.namenode.http-address.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %>.nn1</name>
    <value><%= scope.lookupvar('hadoop::params::master') %>:50070</value>
</property>
<property>
    <name>dfs.namenode.http-address.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %>.nn2</name>
    <value><%= scope.lookupvar('hadoop::params::standby_master') %>:50070</value>
</property>

<property>
    <name>dfs.namenode.https-address.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %>.nn1</name>
    <value><%= scope.lookupvar('hadoop::params::master') %>:50470</value>
</property>
<property>
    <name>dfs.namenode.https-address.<%= scope.lookupvar('hadoop::params::dfs_nameservices') %>.nn2</name>
    <value><%= scope.lookupvar('hadoop::params::standby_master') %>:50470</value>
</property>
 
<property>
    <name>dfs.namenode.shared.edits.dir</name>
    <value>qjournal://<%= scope.lookupvar('hadoop::params::journalnodes').join(':8485;') %>:8485/<%= scope.lookupvar('hadoop::params::dfs_nameservices') %></value>
</property>

<property>
    <name>dfs.client.failover.proxy.provider.mycluster</name>
    <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
</property>

<property>
    <name>dfs.ha.fencing.methods</name>
    <value>sshfence</value>
</property>

<property>
    <name>dfs.ha.fencing.ssh.private-key-files</name>
    <value>/home/<%= scope.lookupvar('hadoop::params::hdfs_user') %>/.ssh/id_rsa</value>
</property>

<property>
    <name>dfs.journalnode.edits.dir</name>
    <value>/tmp/journaldata</value>
</property>

<property>
    <name>dfs.ha.automatic-failover.enabled</name>
    <value>true</value>
</property>

<% end %>

<property>
    <name>dfs.blocksize</name>
    <value>256m</value>
</property>
 

</configuration>
